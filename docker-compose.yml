
version: '3.8'  # Specifies the version of the Docker Compose file format

services:
  server-app:
    build:
      context: .  # Sets the build context to the current directory
      args:
        - NODE_ENV=development  # Passes the NODE_ENV argument to the build process
    image: damianomiazzi/multiarch-server:latest  # Names and tags the image to be created
    container_name: server-app-amu  # Sets the name of the container
    ports:
      - "3002:3002"  # Maps port 3002 on the host to port 3002 in the container
    volumes:
      - .:/app  # Mounts the current directory to /app in the container
      - node_modules:/app/node_modules  # Uses a named volume for node_modules
    env_file:
      - .env  # Loads environment variables from the .env file
    command: npm run dev  # Command to start your application with nodemon in development mode
    depends_on:
      db:
        condition: service_healthy  # Ensures the server-app waits for the database to be healthy

  db:
    build:
      context: .  # Sets the build context to the current directory
      dockerfile: Dockerfile.postgres  # Specifies a custom Dockerfile for building the image
    image: damianomiazzi/multiarch-postgres:latest  # Names and tags the image to be created
    container_name: postgres-amu  # Sets the name of the container
    restart: always  # Always restarts the container if it stops
    volumes:
      - pgdata:/var/lib/postgresql/data  # Mounts the named pgdata volume to /var/lib/postgresql/data in the container
    environment:
      POSTGRES_USER: root  # Sets the PostgreSQL user to 'root'
      POSTGRES_PASSWORD: root  # Sets the PostgreSQL password to 'root'
      POSTGRES_DB: amu_db  # Sets the name of the PostgreSQL database to 'amu_db'
    ports:
      - "5433:5432"  # Maps port 5433 on the host to port 5432 in the container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d amu_db -U root"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    build:
      context: .  # Sets the build context to the current directory
      dockerfile: Dockerfile.pgadmin  # Specifies a custom Dockerfile for building the image
    image: damianomiazzi/multiarch-pgadmin:latest  # Names and tags the image to be created
    container_name: pgadmin-amu  # Sets the name of the container
    restart: always  # Always restarts the container if it stops
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com  # Sets the default email for PGAdmin
      PGADMIN_DEFAULT_PASSWORD: root  # Sets the default password for PGAdmin
    ports:
      - "5050:80"  # Maps port 5050 on the host to port 80 in the container
    depends_on:
      db:
        condition: service_healthy  # Specifies that this service depends on the db service

volumes:
  pgdata:
    name: pgdata  # Assigns a specific name to the pgdata volume
    external: true  # Declares that the pgdata volume is managed externally
  node_modules:  # Declares a named volume for node_modules


# version: '3.8'  # Specifies the version of the Docker Compose file format

# services:
#   server-app:
#     build:
#       context: .  # Sets the build context to the current directory
#       args:
#         - NODE_ENV=development  # Passes the NODE_ENV argument to the build process
#     image: damianomiazzi/multiarch-server:latest  # Names and tags the image to be created
#     container_name: server-app-amu  # Sets the name of the container
#     ports:
#       - "3002:3002"  # Maps port 3002 on the host to port 3002 in the container
#     volumes:
#       - .:/app  # Mounts the current directory to /app in the container
#       - node_modules:/app/node_modules  # Uses a named volume for node_modules
#     env_file:
#       - .env  # Loads environment variables from the .env file
#     command: npm run dev  # Command to start your application with nodemon in development mode

#   db:
#     build:
#       context: .  # Sets the build context to the current directory
#       dockerfile: Dockerfile.postgres  # Specifies a custom Dockerfile for building the image
#     image: damianomiazzi/multiarch-postgres:latest  # Names and tags the image to be created
#     container_name: postgres-amu  # Sets the name of the container
#     restart: always  # Always restarts the container if it stops
#     volumes:
#       - pgdata:/var/lib/postgresql/data  # Mounts the named pgdata volume to /var/lib/postgresql/data in the container
#     environment:
#       POSTGRES_USER: root  # Sets the PostgreSQL user to 'root'
#       POSTGRES_PASSWORD: root  # Sets the PostgreSQL password to 'root'
#       POSTGRES_DB: amu_db  # Sets the name of the PostgreSQL database to 'amu_db'
#     ports:
#       - "5433:5433"  # Maps port 5433 on the host to port 5433 in the container
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U root"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   pgadmin:
#     build:
#       context: .  # Sets the build context to the current directory
#       dockerfile: Dockerfile.pgadmin  # Specifies a custom Dockerfile for building the image
#     image: damianomiazzi/multiarch-pgadmin:latest  # Names and tags the image to be created
#     container_name: pgadmin-amu  # Sets the name of the container
#     restart: always  # Always restarts the container if it stops
#     environment:
#       PGADMIN_DEFAULT_EMAIL: admin@admin.com  # Sets the default email for PGAdmin
#       PGADMIN_DEFAULT_PASSWORD: root  # Sets the default password for PGAdmin
#     ports:
#       - "5050:80"  # Maps port 5050 on the host to port 80 in the container
#     depends_on:
#       - db  # Specifies that this service depends on the db service

# volumes:
#   pgdata:
#     name: pgdata  # Assigns a specific name to the pgdata volume
#     external: true  # Declares that the pgdata volume is managed externally
#   node_modules:  # Declares a named volume for node_modules
